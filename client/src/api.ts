/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<Person>}
     * @memberof InlineResponse200
     */
    results?: Array<Person>;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    id?: number;
    /**
     * the first name of the person
     * @type {string}
     * @memberof Person
     */
    first_name?: string;
    /**
     * the last name of the person
     * @type {string}
     * @memberof Person
     */
    last_name?: string;
    /**
     * 
     * @type {PersonCity}
     * @memberof Person
     */
    city: PersonCity;
}
/**
 * 
 * @export
 * @interface PersonCity
 */
export interface PersonCity {
    /**
     * 
     * @type {number}
     * @memberof PersonCity
     */
    id?: number;
    /**
     * the name of the city
     * @type {string}
     * @memberof PersonCity
     */
    name?: string;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [firstName] first_name
         * @param {string} [lastName] last_name
         * @param {string} [city] city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPersons: async (page?: number, firstName?: string, lastName?: string, city?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/people/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this person.
         * @param {string} [firstName] first_name
         * @param {string} [lastName] last_name
         * @param {string} [city] city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePerson: async (id: string, firstName?: string, lastName?: string, city?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePerson.');
            }
            const localVarPath = `/api/v1/people/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [firstName] first_name
         * @param {string} [lastName] last_name
         * @param {string} [city] city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPersons(page?: number, firstName?: string, lastName?: string, city?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).listPersons(page, firstName, lastName, city, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this person.
         * @param {string} [firstName] first_name
         * @param {string} [lastName] last_name
         * @param {string} [city] city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievePerson(id: string, firstName?: string, lastName?: string, city?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).retrievePerson(id, firstName, lastName, city, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [firstName] first_name
         * @param {string} [lastName] last_name
         * @param {string} [city] city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPersons(page?: number, firstName?: string, lastName?: string, city?: string, options?: any): AxiosPromise<InlineResponse200> {
            return ApiApiFp(configuration).listPersons(page, firstName, lastName, city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this person.
         * @param {string} [firstName] first_name
         * @param {string} [lastName] last_name
         * @param {string} [city] city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePerson(id: string, firstName?: string, lastName?: string, city?: string, options?: any): AxiosPromise<Person> {
            return ApiApiFp(configuration).retrievePerson(id, firstName, lastName, city, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [firstName] first_name
     * @param {string} [lastName] last_name
     * @param {string} [city] city
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listPersons(page?: number, firstName?: string, lastName?: string, city?: string, options?: any) {
        return ApiApiFp(this.configuration).listPersons(page, firstName, lastName, city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this person.
     * @param {string} [firstName] first_name
     * @param {string} [lastName] last_name
     * @param {string} [city] city
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public retrievePerson(id: string, firstName?: string, lastName?: string, city?: string, options?: any) {
        return ApiApiFp(this.configuration).retrievePerson(id, firstName, lastName, city, options).then((request) => request(this.axios, this.basePath));
    }
}


